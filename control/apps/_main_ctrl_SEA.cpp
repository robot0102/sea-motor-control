///////////////////////////////////////////////////////////////////////////                                                                     
// _main_ctrl_SEA.cpp 
//
// Author: Gabriel Aguirre-Ollinger 
// Documentation start: 06.03.2020
// 
// Description:		 
//					 
//					 
// Modifications record:
//		
// 
///////////////////////////////////////////////////////////////////////////

#include "_test_scripts.hpp" 

///////////////////////////////////////////////////////////////////////////
// Control modes variables:
///////////////////////////////////////////////////////////////////////////

#define MODE_VEL_STR	"MODE_VEL" 
#define MODE_CURR_STR	"MODE_CURR" 
#define MODE_P_CTRL_STR	"MODE_P_CTRL" 

int ctrl_mode; 

///////////////////////////////////////////////////////////////////////////
// UI functions:
///////////////////////////////////////////////////////////////////////////

int run_on; 

void 
sigint_1_step(int dummy) {
    if (run_on == 1)
		run_on = 0;
}

void 
sigint_2_step(int dummy) {
    if (run_on == -1)
		run_on = 1;
	else if (run_on == 1)
		run_on = 0;
}

///////////////////////////////////////////////////////////////////////////
// Main function:
///////////////////////////////////////////////////////////////////////////

int 
main(int argc, char* argv[]) { 

	///////////////////////////////////////////////////////////////////////////
	// Real-time step duration:
	///////////////////////////////////////////////////////////////////////////

	int dt_ms = 10;

	///////////////////////////////////////////////////////////////////////////
	// Select RT function:
	///////////////////////////////////////////////////////////////////////////

	void* (*fun_h)(void*) = test_ctrl_SEA; // pointer to test function

	///////////////////////////////////////////////////////////////////////////
	// Initialization:
	///////////////////////////////////////////////////////////////////////////

	// Catch a Ctrl-C event:
	void  (*sig_h)(int) = sigint_1_step;   // pointer to signal handler

	///////////////////////////////////////////////////////////////////////////
	// Real-time parameters:
	///////////////////////////////////////////////////////////////////////////

    const int PRIORITY = 80; 
    long dt_ns = (long)(dt_ms*NS_PER_MS);  

	printf("\ndt_ns = [%ld]\n\n", dt_ns);  

	///////////////////////////////////////////////////////////////////////////
	// Initialization:  
	///////////////////////////////////////////////////////////////////////////

	// Catch a Ctrl-C event: 
    signal(SIGINT, sig_h);  
    
    // Lock memory:  
    if(mlockall(MCL_CURRENT|MCL_FUTURE) == -1) { 
        printf("\nmlockall failed: %m\n\n");
        exit(-2);  
    }

	///////////////////////////////////////////////////////////////////////////
	// Start periodic thread: 
	///////////////////////////////////////////////////////////////////////////

	printf("\nCalling start_periodic_task()... \n\n");

	start_periodic_thread(fun_h, (void*)(&dt_ns), PRIORITY);

	return 0;
}
