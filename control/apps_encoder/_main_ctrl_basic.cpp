///////////////////////////////////////////////////////////////////////////                                                                     
// _main_ctrl_basic.cpp
//
// Author: Gabriel Aguirre-Ollinger 
// Documentation start: 06.03.2020
// 
// Description:		 
//					 
//					 
// Modifications record:
//		
//
///////////////////////////////////////////////////////////////////////////

#include "_test_scripts.hpp"

///////////////////////////////////////////////////////////////////////////
// Control modes variables:
///////////////////////////////////////////////////////////////////////////

#define MODE_VEL_STR	"MODE_VEL"
#define MODE_CURR_STR	"MODE_CURR"
#define MODE_P_CTRL_STR	"MODE_P_CTRL"

int ctrl_mode;

///////////////////////////////////////////////////////////////////////////
// UI functions:
///////////////////////////////////////////////////////////////////////////

int run_on;

void 
sigint_1_step(int dummy) {
    if (run_on == 1)
		run_on = 0;
}

void 
sigint_2_step(int dummy) {
    if (run_on == -1)
		run_on = 1;
	else if (run_on == 1)
		run_on = 0;
}

///////////////////////////////////////////////////////////////////////////
// Main function:
///////////////////////////////////////////////////////////////////////////

int 
main(int argc, char* argv[]) {

	///////////////////////////////////////////////////////////////////////////
	// Real-time step duration:
	///////////////////////////////////////////////////////////////////////////

	int dt_ms;

	///////////////////////////////////////////////////////////////////////////
	// Select RT function:
	///////////////////////////////////////////////////////////////////////////

	void* (*fun_h)(void*) = test_ctrl_multi_mode; // pointer to test function

	///////////////////////////////////////////////////////////////////////////
	// Initialization:
	///////////////////////////////////////////////////////////////////////////

	// Catch a Ctrl-C event:
	void  (*sig_h)(int);   // pointer to signal handler

	///////////////////////////////////////////////////////////////////////////
	// Signal handling:
	///////////////////////////////////////////////////////////////////////////

	// Set control mode:
	// TODO: solve issue of undeclared variables used by WRITE_DAT_SYS():
	const int IDX_CTRL_MODE = 1;
	char ctrl_mode_str[LEN_NAME_MAX];
	strcpy(ctrl_mode_str, argv[IDX_CTRL_MODE]);

	printf("\nControl mode = [%s] \n\n", ctrl_mode_str);  

	if (!strcmp(ctrl_mode_str, MODE_VEL_STR)) { 
		ctrl_mode = MODE_VEL;
		dt_ms = 10;
		sig_h = sigint_1_step;  
	}
	else if (!strcmp(ctrl_mode_str, MODE_CURR_STR)) {  
		ctrl_mode = MODE_CURR;
		dt_ms = 10;
		sig_h = sigint_1_step; 
	}
	else if (!strcmp(ctrl_mode_str, MODE_P_CTRL_STR)) {  
		ctrl_mode = MODE_P_CTRL;
		dt_ms = 5;
		sig_h = sigint_1_step; 
	}
	else {
		printf("\nInvalid control mode [%s] \n\n", ctrl_mode_str);  
		return 0;
	}

	///////////////////////////////////////////////////////////////////////////
	// Real-time parameters:
	///////////////////////////////////////////////////////////////////////////

    const int PRIORITY = 80;
    long dt_ns = (long)(dt_ms*NS_PER_MS);

	printf("dt_ns = [%ld]\n\n", dt_ns);

	///////////////////////////////////////////////////////////////////////////
	// Initialization:
	///////////////////////////////////////////////////////////////////////////

	// Catch a Ctrl-C event:
    signal(SIGINT, sig_h);
    
    // Lock memory:
    if(mlockall(MCL_CURRENT|MCL_FUTURE) == -1) {
        printf("mlockall failed: %m\n");
        exit(-2);
    }

	///////////////////////////////////////////////////////////////////////////
	// Start periodic thread:
	///////////////////////////////////////////////////////////////////////////

	printf("Calling start_periodic_task()... \n\n");
  printf("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd");

	start_periodic_thread(fun_h, (void*)(&dt_ns), PRIORITY);

	return 0;
}
